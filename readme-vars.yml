---

# project information
project_name: openvscode-server
project_url: "https://github.com/gitpod-io/openvscode-server"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/openvscode-server-logo.png"
project_blurb: "[{{ project_name|capitalize }}]({{ project_url }}) provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser."
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"
project_categories: "Programming"
# supported architectures
available_architectures:
  - {arch: "{{ arch_x86_64 }}", tag: "amd64-latest"}
  - {arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}
# development version
development_versions: true
development_versions_items:
  - {tag: "latest", desc: "Stable releases"}
  - {tag: "insiders", desc: "Insiders releases"}
# container parameters
common_param_env_vars_enabled: true
param_container_name: "{{ project_name }}"
param_usage_include_vols: true
param_volumes:
  - {vol_path: "/config", vol_host_path: "/path/to/{{ project_name }}/config", desc: "Contains all relevant configuration files."}
param_usage_include_ports: true
param_ports:
  - {external_port: "3000", internal_port: "3000", port_desc: "Web UI port."}
# optional container parameters
opt_param_usage_include_env: true
opt_param_env_vars:
  - {env_var: "CONNECTION_TOKEN", env_value: "", desc: "Optional security token for accessing the Web UI (ie. `supersecrettoken`)."}
  - {env_var: "CONNECTION_SECRET", env_value: "", desc: "Optional path to a file inside the container that contains the security token for accessing the Web UI (ie. `/path/to/file`). Overrides `CONNECTION_TOKEN`."}
  - {env_var: "SUDO_PASSWORD", env_value: "password", desc: "If this optional variable is set, user will have sudo access in the openvscode-server terminal with the specified password."}
  - {env_var: "SUDO_PASSWORD_HASH", env_value: "", desc: "Optionally set sudo password via hash (takes priority over `SUDO_PASSWORD` var). Format is `$type$salt$hashed`."}
# application setup block
app_setup_block_enabled: true
app_setup_block: |
  If `CONNECTION_TOKEN` or `CONNECTION_SECRET` env vars are set, you can access the webui at `http://<your-ip>:3000/?tkn=supersecrettoken` (replace `supersecrettoken` with the value set). If not, you can access the webui at `http://<your-ip>:3000`.

  For github integration, drop your ssh key in to `/config/.ssh`.
  Then open a terminal from the top menu and set your github username and email via the following commands

  ```bash
  git config --global user.name "username"
  git config --global user.email "email address"
  ```

  When reverse proxied through SWAG, custom services running on specific ports inside openvscode-server can be accessed at `https://PORT.openvscode-server.domain.com` very much like how code-server's port proxy function is handled. For that, a wildcard CNAME `*.openvscode-server.domain.com` needs to be created and the SWAG cert needs to cover those subdomains.
# init diagram
init_diagram: |
  "openvscode-server:latest": {
    docker-mods
    base {
      fix-attr +\nlegacy cont-init
    }
    docker-mods -> base
    legacy-services
    custom services
    init-services -> legacy-services
    init-services -> custom services
    custom services -> legacy-services
    legacy-services -> ci-service-check
    init-migrations -> init-adduser
    init-os-end -> init-config
    init-config -> init-config-end
    init-crontab-config -> init-config-end
    init-openvscode-server -> init-config-end
    init-config -> init-crontab-config
    init-mods-end -> init-custom-files
    init-adduser -> init-device-perms
    base -> init-envfile
    base -> init-migrations
    init-config-end -> init-mods
    init-mods-package-install -> init-mods-end
    init-mods -> init-mods-package-install
    init-config -> init-openvscode-server
    init-adduser -> init-os-end
    init-device-perms -> init-os-end
    init-envfile -> init-os-end
    init-custom-files -> init-services
    init-services -> svc-cron
    svc-cron -> legacy-services
    init-services -> svc-openvscode-server
    svc-openvscode-server -> legacy-services
  }
  Base Images: {
    "baseimage-ubuntu:noble"
  }
  "openvscode-server:latest" <- Base Images
# changelog
changelogs:
  - {date: "19.08.24:", desc: "Rebase to Ubuntu Noble."}
  - {date: "01.07.23:", desc: "Deprecate armhf. As announced [here](https://www.linuxserver.io/blog/a-farewell-to-arm-hf)"}
  - {date: "29.09.22:", desc: "Rebase to jammy, switch to s6v3. Fix chown logic to skip `/config/workspace` contents."}
  - {date: "12.02.22:", desc: "Update `install-extension` helper to compensate for upstream changes."}
  - {date: "04.02.22:", desc: "Update binary for 1.64.0+. Allow for no token set when both toekn env vars are unset. Add libsecret for keytar."}
  - {date: "29.12.21:", desc: "Add `install-extension` as a helper for mods to install extensions."}
  - {date: "10.12.21:", desc: "Update deprecated connectionToken arg."}
  - {date: "30.11.21:", desc: "Fix app folder permissions, add the optional sudo password vars."}
  - {date: "29.11.21:", desc: "Create `.profile` and `.bashrc` for the user."}
  - {date: "29.11.21:", desc: "Release `insiders` tag."}
  - {date: "28.11.21:", desc: "Initial Release."}
